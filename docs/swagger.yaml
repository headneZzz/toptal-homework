basePath: /
definitions:
  model.AddToCartRequest:
    properties:
      book_id:
        type: integer
    type: object
  model.AuthRequest:
    properties:
      password:
        maxLength: 50
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  model.BookCreateRequest:
    properties:
      author:
        maxLength: 255
        minLength: 1
        type: string
      category_id:
        minimum: 1
        type: integer
      price:
        minimum: 0
        type: integer
      stock:
        minimum: 0
        type: integer
      title:
        maxLength: 255
        minLength: 1
        type: string
      year:
        maximum: 2100
        minimum: 1800
        type: integer
    required:
    - author
    - category_id
    - price
    - stock
    - title
    - year
    type: object
  model.BookResponse:
    properties:
      author:
        type: string
      category_id:
        type: integer
      price:
        type: integer
      stock:
        type: integer
      title:
        type: string
      year:
        type: integer
    type: object
  model.BookUpdateRequest:
    properties:
      author:
        maxLength: 255
        minLength: 1
        type: string
      category_id:
        minimum: 1
        type: integer
      id:
        minimum: 1
        type: integer
      price:
        minimum: 0
        type: integer
      stock:
        minimum: 0
        type: integer
      title:
        maxLength: 255
        minLength: 1
        type: string
      year:
        maximum: 2100
        minimum: 1800
        type: integer
    required:
    - author
    - category_id
    - id
    - price
    - stock
    - title
    - year
    type: object
  model.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.CategoryResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.HealthResponse:
    properties:
      services:
        additionalProperties:
          $ref: '#/definitions/model.Status'
        type: object
      status:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  model.LoginResponse:
    properties:
      token:
        type: string
    type: object
  model.ProblemDetail:
    properties:
      detail:
        type: string
      instance:
        type: string
      status:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  model.RegisterResponse:
    properties:
      message:
        type: string
    type: object
  model.Status:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: your-email@domain.com
    name: API Support
  description: This is a book shop server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Book Shop API
  version: "1.0"
paths:
  /book:
    get:
      consumes:
      - application/json
      description: Get a list of all available books, optionally filtered by category
        IDs
      parameters:
      - collectionFormat: csv
        description: Category IDs to filter by
        in: query
        items:
          type: integer
        name: categoryId
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.BookResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      summary: Get available books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with the provided details
      parameters:
      - description: Book details
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/model.BookCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Create a new book
      tags:
      - books
  /book/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get a book's details by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      summary: Get book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book's details
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book details
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/model.BookUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Update a book
      tags:
      - books
  /cart:
    get:
      consumes:
      - application/json
      description: Get the current user's shopping cart contents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.BookResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Get user's cart
      tags:
      - cart
  /cart/add:
    post:
      consumes:
      - application/json
      description: Add a book to the current user's shopping cart
      parameters:
      - description: Book to add to cart
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AddToCartRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Add book to cart
      tags:
      - cart
  /cart/purchase:
    post:
      consumes:
      - application/json
      description: Purchase all books in the current user's shopping cart
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "422":
          description: Insufficient stock
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Purchase cart
      tags:
      - cart
  /cart/remove:
    post:
      consumes:
      - application/json
      description: Remove a book from the current user's shopping cart
      parameters:
      - description: Book to remove from cart
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AddToCartRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "404":
          description: Book not found in cart
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Remove book from cart
      tags:
      - cart
  /category:
    get:
      consumes:
      - application/json
      description: Get a list of all available categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CategoryResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category with the provided details
      parameters:
      - description: Category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Create a new category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing category's details
      parameters:
      - description: Updated category details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Update a category
      tags:
      - categories
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      security:
      - ApiKeyAuth: []
      summary: Delete a category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get a category's details by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      summary: Get category by ID
      tags:
      - categories
  /health:
    get:
      consumes:
      - application/json
      description: Get the health status of the server and its dependencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HealthResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/model.HealthResponse'
      summary: Health check
      tags:
      - system
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns JWT token
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      summary: User login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.AuthRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/model.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "409":
          description: Username already exists
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      summary: Register new user
      tags:
      - auth
schemes:
- http
swagger: "2.0"
